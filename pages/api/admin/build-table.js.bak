// pages/api/admin/build-table.js
import { supabase } from '../../../lib/supabase'

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST'])
    return res.status(405).end(`Method ${req.method} Not Allowed`)
  }

  const { base_id, name, fields } = req.body || {}
  if (!base_id || !name) return res.status(400).json({ error: 'base_id and name required' })

  // 1) Find or create table
  const { data: existingTables, error: findErr } = await supabase
    .from('tables')
    .select('id')
    .eq('base_id', base_id)
    .eq('name', name)
    .limit(1)

  if (findErr) return res.status(500).json({ error: findErr.message })

  let table = existingTables?.[0]
  if (!table) {
    const { data, error } = await supabase
      .from('tables')
      .insert([{ base_id, name }])
      .select()
      .single()
    if (error) return res.status(500).json({ error: error.message })
    table = data
  }

  // 2) Create missing fields
  if (Array.isArray(fields)) {
    for (let i = 0; i < fields.length; i++) {
      const f = fields[i] || {}
      const label = (f.name || '').trim()
      const type = (f.type || 'text').toLowerCase()
      const position = f.position ?? i + 1
      const options = f.options ?? null

      if (!label) continue

      const { data: exists, error: chkErr } = await supabase
        .from('fields')
        .select('id')
        .eq('table_id', table.id)
        .eq('name', label)
        .limit(1)

      if (chkErr) return res.status(500).json({ error: chkErr.message })
      if (exists?.length) continue

      const { error: insErr } = await supabase
        .from('fields')
        .insert([{ table_id: table.id, name: label, type, position, options }])

      if (insErr) return res.status(500).json({ error: insErr.message })
    }
  }

  return res.status(201).json(table)
}