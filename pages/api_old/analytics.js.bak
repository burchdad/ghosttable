// Simple analytics API endpoint for demo purposes
import { getRecords } from '../../../lib/supabase';

// Simple in-memory cache (for demo; use Redis or similar for production)
const cache = {};

export default async function handler(req, res) {
  const { table_id } = req.query;
  if (!table_id) return res.status(400).json({ error: 'Missing table_id' });

  // Cache key includes table_id and field (if present)
  const field = req.query.field || '';
  const cacheKey = `${table_id}:${field}`;
  if (cache[cacheKey] && (Date.now() - cache[cacheKey].ts < 60000)) {
    return res.status(200).json(cache[cacheKey].data);
  }

  // Fetch records for the table
  const records = await getRecords(table_id);
  const count = records.length;
  const sumAmount = records.reduce((sum, r) => sum + (r.amount || 0), 0);

  // Example chart data: group by Active status
  const activeCount = records.filter(r => r.active).length;
  const inactiveCount = count - activeCount;
  const chartData = [
    { name: 'Active', value: activeCount },
    { name: 'Inactive', value: inactiveCount }
  ];

  // Amount distribution (histogram)
  const amountBins = [0, 10, 50, 100, 500, 1000, 5000];
  const amountDistribution = amountBins.map((bin, i) => {
    const nextBin = amountBins[i + 1] || Infinity;
    const countInBin = records.filter(r => r.amount >= bin && r.amount < nextBin).length;
    return { range: `${bin}${nextBin !== Infinity ? ' - ' + nextBin : '+'}`, count: countInBin };
  });

  // Trend analysis (Amount over time, if date field exists)
  let trendData = [];
  if (records.length && records[0].date) {
    // Group by date (assume YYYY-MM-DD)
    const byDate = {};
    records.forEach(r => {
      const d = r.date?.slice(0, 10);
      if (!d) return;
      byDate[d] = (byDate[d] || 0) + (r.amount || 0);
    });
    trendData = Object.entries(byDate).map(([date, amount]) => ({ date, amount }));
    trendData.sort((a, b) => a.date.localeCompare(b.date));
  }

  // Prepare response data
  const responseData = { count, sumAmount, chartData, amountDistribution, trendData };
  cache[cacheKey] = { ts: Date.now(), data: responseData };
  res.status(200).json({ count, sumAmount, chartData, amountDistribution, trendData });
}
